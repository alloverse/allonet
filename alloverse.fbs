// Schema file for the Alloverse network protocol

namespace Alloverse;

///////////////////////////////////////////////////////////////
// Legacy Stucture
///////////////////////////////////////////////////////////////

table State {
    revision:uint64;
    entities:[Entity];
}

table Entity {
    id:string (key);
    owner_agent_id:string;
    components:Components;
}

table Components {
    transform:TransformComponent;
    relationships:RelationshipsComponent;
    live_media:LiveMediaComponent;
    clock:ClockComponent;

    // If a Component has any non-standard fields (or perhaps doesn't
    // have a definition at all), it is dynamically typed with a flexbuffer
    flex:[ubyte]; // (flexbuffer) of map from compname -> comp
}

///////////////////////////////////////////////////////////////
// Hopefully the new structure, after refactors:
///////////////////////////////////////////////////////////////

/*
table State2 {
    revision:uint64;
    entities:[Entity2];
    components:[Components2];
}

table Entity2 {
    id:string;
    owner_agent_id:string;
}

table Components2 {
    transform:[TransformComponent];
    relationships:[RelationshipsComponent];
    flex:[ubyte]; // (flexbuffer) of map from compname -> comp
}

// Every Component has to start with one of these
table ComponentBase {
    eid:string;
}
*/

///////////////////////////////////////////////////////////////
// Components
/////////////////////////////////////////////////////////////// 

table TransformComponent {
    matrix:Mat4;
}

table RelationshipsComponent {
    parent:string;
}

table LiveMediaMetadata {
    // audio
    sample_rate:int;
    channel_layout:string;

    // video
    width:int;
    height:int;
}
table LiveMediaComponent {
    track_id:int;
    type:string;
    format:string;
    metadata:LiveMediaMetadata;
}
table ClockComponent {
    time:double;
}

///////////////////////////////////////////////////////////////
// Types
/////////////////////////////////////////////////////////////// 

struct Mat4 {
    m:[float:16];
}


root_type State;
