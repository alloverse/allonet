// Schema file for the Alloverse network protocol

namespace Alloverse;

///////////////////////////////////////////////////////////////
// Legacy Stucture
///////////////////////////////////////////////////////////////

table State {
    revision:uint64;
    entities:[Entity];
}

table Entity {
    id:string (key);
    owner_agent_id:string;
    components:Components;
}

table Components {
    transform:TransformComponent;
    relationships:RelationshipsComponent;
    live_media:LiveMediaComponent;
    clock:ClockComponent;
    intent:IntentComponent;
    property_animations:PropertyAnimationsComponent;
    geometry:GeometryComponent;
    ui:UIComponent;
    collider:ColliderComponent;
    grabbable:GrabbableComponent;
    // XXX: Make sure to update allo_mutable_state::changeComponents and allo_state_diff_compute when adding more fields

    // todo: non-conforming components as flex or json
}

///////////////////////////////////////////////////////////////
// Hopefully the new structure, after refactors:
///////////////////////////////////////////////////////////////

/*
table State2 {
    revision:uint64;
    entities:[Entity2];
    components:[Components2];
}

table Entity2 {
    id:string;
    owner_agent_id:string;
}

table Components2 {
    transform:[TransformComponent];
    relationships:[RelationshipsComponent];
    flex:[ubyte]; // (flexbuffer) of map from compname -> comp
}

// Every Component has to start with one of these
table ComponentBase {
    eid:string;
}
*/

///////////////////////////////////////////////////////////////
// Components
/////////////////////////////////////////////////////////////// 

table TransformComponent {
    matrix:Mat4;
}

table RelationshipsComponent {
    parent:string;
}

table LiveMediaMetadata {
    // audio
    sample_rate:int;
    channel_layout:string;

    // video
    width:int;
    height:int;
}
table LiveMediaComponent {
    track_id:int;
    type:string;
    format:string;
    metadata:LiveMediaMetadata;
}

table ClockComponent {
    time:double;
}

table IntentComponent {
    actuate_pose:string;
    from_avatar:string;
}

table NumberAnimationValue {
    number:double;
}
table VectorAnimationValue {
    vector:Vec3;
}
table RotationAnimationValue {
    angle:double;
    axis:Vec3;
}
table TransformAnimationValue {
    matrix:Mat4;
}

union AnimationValue {
    number:NumberAnimationValue,
    vector:VectorAnimationValue,
    rotation:RotationAnimationValue,
    matrix:TransformAnimationValue
}
table PropertyAnimation {
    id:string (key);
    path:string;
    from:AnimationValue;
    to:AnimationValue;
    start_at:double = 0.0;
    duration:double = 1.0;
    easing:string;
    repeats:bool = false;
    autoreverses:bool = false;
}
table PropertyAnimationsComponent {
    animations:[PropertyAnimation];
}

table GeometryComponent {
    type:string;
    // only valid if type=="asset" or type=="hardcoded-model"
    name:string; 

    // only valid if type=="inline"
    vertices:[double]; // [x1, y1, z1, x2, y2, z2, ...]
    normals:[double]; // [x1, y1, z1, x2, y2, z2, ...]
    uvs:[double]; // [u1, v1, u2, v2, u3, v3, ...]
    triangles:[int]; // [i1, j1, k1, i2, j2, k2, ...]
}

table UIComponent {
    view_id:string;
}

table ColliderComponent {
    type:string;
    width:double;
    height:double;
    depth:double;
}

table GrabbableComponent {
    grabbable:bool;
    actuate_on:string;
    translation_constraint:[double]; // [x, y, z]
    rotation_constraint:[double]; // [x, y, z]
    target_hand_transform:Mat4;
}

///////////////////////////////////////////////////////////////
// Structs
/////////////////////////////////////////////////////////////// 

struct Mat4 {
    m:[double:16];
}

struct Vec3 {
    v:[double:3];
}

///////////////////////////////////////////////////////////////
// Interactions and related types
/////////////////////////////////////////////////////////////// 

table EntitySpec {
    components:Components;
    children:[EntitySpec];
}


root_type State;
